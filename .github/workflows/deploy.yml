name: CI/CD Deployment for Next.js Frontend

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_NAME: coderdexter/trading-backend

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate version
        id: version
        run: echo "VERSION=$(date +'%Y%m%d')-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.VERSION }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max

      - name: Clean up old images from DockerHub
        run: |
          # 获取所有标签（除了latest和buildcache）
          TAGS=$(curl -s "https://hub.docker.com/v2/repositories/${{ env.IMAGE_NAME }}/tags/?page_size=100" \
            -H "Authorization: JWT ${{ secrets.DOCKER_PASSWORD }}" | \
            jq -r '.results[].name' | \
            grep -v -E '^(latest|buildcache)$')

          # 保留最新的一个版本标签
          echo "$TAGS" | sort -r | tail -n +2 | while read -r tag; do
            echo "Deleting tag: $tag"
            curl -s -X DELETE \
              "https://hub.docker.com/v2/repositories/${{ env.IMAGE_NAME }}/tags/$tag/" \
              -H "Authorization: JWT ${{ secrets.DOCKER_PASSWORD }}"
          done

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PEM_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to server
        run: |
          # 首先复制 docker-compose 文件到服务器
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
            docker-compose.yml ubuntu@${{ secrets.SERVER_HOST }}:/home/ubuntu/dev-ops/frontend/

          # 然后执行部署命令
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
            ubuntu@${{ secrets.SERVER_HOST }} \
            "cd /home/ubuntu/dev-ops/frontend && \
            docker compose down --remove-orphans && \
            docker compose pull && \
            docker compose up -d && \
            # 保留最新版本的镜像，删除其他所有版本
            docker image ls '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}' --format '{{.ID}}' | tail -n +2 | xargs -r docker image rm -f && \
            # 清理所有未使用的镜像、容器、网络和构建缓存
            docker system prune -af"
